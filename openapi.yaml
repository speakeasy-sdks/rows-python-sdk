openapi: 3.1.0
info:
  version: 1.0.0-beta
  title: Rows API Docs
  termsOfService: https://rows.com/terms/
  contact:
    name: API Support
    email: support@rows.com
    url: https://forum.rows.com/
  x-logo:
    url: /logo.png
    href: https://www.rows.com
  description: |-
    # Introduction
        
    Welcome to Rows API documentation.

    Rows API is a RESTful interface that lets you  create Rows integrations, i.e. applications that read and maintain data inside Rows spreadsheets programmatically.

    In this documentation you can find detailed information about what you can do with Rows API, and how you should use it. We recommend that you start by reading the sections below where we describe important information about how authentication, rate-limiting, pagination and the API endpoints work.

    If you’re not familiar with the terms Workspaces, Folders, Spreadsheets, Pages, and Tables, please read the [Rows concepts](#section/Introduction/Rows-concepts) section below or [the docs](https://rows.com/docs/category/getting-started) of Rows website for more detailed information.

    If you still have questions beyond this documentation, please contact us on support@rows.com email or through our chat interface in your Rows account.

    ## Rows concepts

    Please make sure you understand the following concepts about Rows. This is important to use Rows API successfully and to identify the data you want to read or write correctly. 

    ### Workspace

    A Workspace is where you come together to work with others. It contains Folders and ultimately all your Spreadsheets. You can be the owner and/or member of several Workspaces. Each Workspace has one owner and can have multiple members.  Each Workspace has a name.

    ### Folder

    Inside each Workspace, you can create Folders to better organize your Spreadsheets. Each Workspace can contain several Folders. And each Folder can contain several Spreadsheets. Each folder has a name and a Folder ID.

    ### Spreadsheet

    This is the primary object in Rows. Each Spreadsheet can contain Pages and Tables. Each Spreadsheet has a name and an ID. This ID identifies the Spreadsheet unequivocally inside the Rows platform.

    ### Page

    A Page is where you place Tables, Forms or Charts. A Page contains a name and an ID. This ID identifies the Page inside the Spreadsheet.

    ### Table

    A Table contains your data structured in rows (e.g. 1, 2, 3, …) and columns (`A`, `B`, `C`, …), which contain cells (e.g. `A1`, `A2`, `B1`, `B2`, …). Cell ranges can be expressed as bounded ranges (e.g. `A1:A5`, `A1:E1`, `A1:E5`) or as unbounded ranges (e.g. `A:A`, `A:E`, `1:1`). A Form in Rows behaves like a Table for the purposes of Rows API. A Table has a name and a slug.

    ### How to find this information?

    You will need some of these IDs as parameters when you use this API. You can find them in the following ways:

    | ID             | Parameter      | How to find it                                                                                                                                                                                                                                                                                            |
    |----------------|----------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Folder ID      | folder_id      | Use the List folders endpoint below. You will get all Folder names and IDs in your Workspace.                                                                                                                                                                                                             |
    | Spreasdheet ID | spreadsheet_id | Use the List spreadsheets endpoint below. You will get all Spreadsheet names and IDs in your Workspace. Alternatively, you can get the ID from the spreadsheet URL in your browser: ```https://rows.com/{workspace_name}/{folder_name}/{spreadsheet_name}-{spreadsheet_id}/{page_id}/edit#{table_slug}``` |
    | Table ID       | table_id       | Use the Get spreadsheet information endpoint below. You will get all Page and Table names and IDs of your Spreadsheet.                                                                                                                                                                                    |

    More information about Rows concepts, please check our [docs](https://rows.com/docs) section.

    ## Authentication & Authorization

    Rows API uses token-based authentication.

    All your requests need an HTTP authorization bearer token header as in:

    ```
    Authorization: Bearer {your-api-key}
    ```

    To manage API Keys, go to your Workspace Settings. API Keys can be revoked by the corresponding owner and by the Workspace owner or administrator. Each user can create up to 10 API Keys per workspace.

    An API key is always associated to the workspace where it was created and to the user who created it. Therefore, an API key has the same permissions as the user on the corresponding workspace:

    - For read access - see GET requests below - you need access to the spreadsheet at least as a Live user.
    - For write access - see POST and PUT request below - you need access to the spreadsheet at least as an Editor.

    For example: 

    - The user john.smith@rows.com is a member of the ACME workspace. This workspace contains two spreadsheets: Team’s roadmap Q1 2022 and the Team’s budget 2022 spreadsheet. John has Editor access to the Team’s budget 2022 spreadsheet and Live user access to the Team’s roadmap Q1 2022.
    - Let’s say that John creates a new API key for the mentioned workspace.
    - If a user calls Rows API to append/write new values to Team’s roadmap Q1 2022 spreadsheet, then a 403 Forbidden error will be returned. Because this user only has Live user, i.e. read access to the mentioned spreadsheet.
    - If the user does the same operation to write to the Team’s budget 2022 Spreadsheet, the operation will succeed.

    ## Formats

    Rows API uses JSON to encode objects. This means that all requests should be encoded as JSON before sending them to the API. In the same manner, all responses are encoded in the same format: JSON.

    ## Errors

    Rows API relies on standard [HTTP codes](https://www.rfc-editor.org/rfc/rfc7231#section-6) to classify operation outcomes. When an error is returned, the code and a corresponding message are encoded in the response. Here’s an example of an error:

    ```
    {
      "code": 404,
      "message": "Workspace not found."
    }
    ```

    All possible errors are listed below:

    | HTTP Status code | Code | Message                                                                                                                                          |
    |------------------|------|--------------------------------------------------------------------------------------------------------------------------------------------------|
    | 400              | 400  | Bad request. Invalid {input-name}.                                                                                                               |
    | 401              | 401  | Missing API Key.                                                                                                                                 |
    | 403              | 403  | Request forbidden. You don’t have access to this resource. Please check permissions with a workspace admin.                                      |
    | 404              | 404  | {resource-name} not found.                                                                                                                       |
    | 408              | 408  | Request timeout.                                                                                                                                 |
    | 429              | 429  | Too many requests.                                                                                                                               |
    | 500              | 500  | Internal server error. A group of goats was sent in your direction to fix the problem. If you see them, please give them this code {request-id}. |

    ## Rate-limiting

    Rows API is limited to 60 requests per minute per API Key. In case you need a higher limit, please contact us on support@rows.com email or through our chat interface in your Rows account.

    If you hit this limit, you will receive a `429 Too Many Requests` error, incl. a `Retry-After` header in the response indicating how many seconds you should wait before making a follow-up request.

    ## Pagination

    Some API endpoints support pagination to allow you to control how many items of data you receive in a response and at which item to start. This way, you can “paginate” through all cells in a spreadsheet and handle even large amounts of data.

    You can use the following two parameters for this purpose:

    | Parameter    | Description                                             | Type               | Default value |
    |--------------|---------------------------------------------------------|--------------------|---------------|
    | ```limit```  | Maximum number of items returned                        | integer [0...1000] | 100           |
    | ```offset``` | Number of items to be skipped before returning the rows | integer            | 0             |

    The API’s response for paginated results contains two fields: ```items``` and ```next_page_results```.

    Both fields are described below.

    | Field                   | Description                                      | Type                 | Default value                   |
    |-------------------------|--------------------------------------------------|----------------------|---------------------------------|
    | ```items```             | Items result set                                 | list                 | --                              |
    | ```next_page_results``` | Relative API URL to get the next page of results | link (relative path) | `null` (when its the last page) |

    ## Make your first request

    The base URL of Rows API is ```https://api.rows.com/```.

    In the sections below, you can find a complete list of available operations with corresponding inputs and output models. For each operation, you can find the full API URL to make a request on the right-hand side panel.

    Usually, a request URL pattern is composed of a base URL, a version and an operation URL. An example is: 
    ```

    https://api.rows.com/v1beta1/workspaces

    ```

    To start using Rows API and create your first request, you'll need the following:

    - A tool to send the request from, like [curl](https://curl.se/) - or Rows itself, of course. [See our docs for details](https://rows.com/docs/category/ap-is-and-json).
    - Create an API key on your workspace settings.
    - Choose one of the operations from the sections below.
    - Create the request URL with the corresponding inputs and authenticate it with a header, incl. your API key.

    The example below is using [curl](https://curl.se/) to get the detail of a workspace:

    ```

    curl -s -H 'Authorization: Bearer {your API Key}' \
      'https://api.rows.com/v1beta1/workspaces'

    ```

    The same request in Rows would be:

    ```

    =GET(“https://api.rows.com/v1beta1/workspaces”,PAIR2JSON(“Authorization”,CONCAT(“Bearer ”, ”{your API Key}”)))

    ```

    Optionally, you can click below to run requests on [Postman](https://www.postman.com/downloads/), to generate all the requests.

    [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/3548821-976a773b-185e-4189-b2a9-b2ab9f8a8909?action=collection%2Ffork&collection-url=entityId%3D3548821-976a773b-185e-4189-b2a9-b2ab9f8a8909%26entityType%3Dcollection%26workspaceId%3D42bd03b8-7014-46af-beb8-55e94df7b18a#?env%5BProduction%5D=W3sia2V5IjoiYmFzZVVybCIsInZhbHVlIjoiaHR0cHM6Ly9hcGkucm93cy5jb20vdjFiZXRhMSIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJkZWZhdWx0Iiwic2Vzc2lvblZhbHVlIjoiaHR0cHM6Ly9hcGkucm93cy5jb20iLCJzZXNzaW9uSW5kZXgiOjB9LHsia2V5IjoiYmVhcmVyVG9rZW4iLCJ2YWx1ZSI6IjEyMzQ1NiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJzZWNyZXQiLCJzZXNzaW9uVmFsdWUiOiIxMjM0NTYiLCJzZXNzaW9uSW5kZXgiOjF9XQ==)
tags:
  - name: Workspace
    description: Operations regarding the Workspace object.
  - name: Spreadsheet
    description: Operations regarding the Spreadsheet object.
servers:
  - url: https://api.rows.com/v1beta1
    description: Rows API (beta v1)
paths:
  /workspaces:
    get:
      tags:
        - Workspace
      summary: Get workspace information
      description: |
        List details of the Workspace associated to the API Key used.
      operationId: getWorkspaceInformation
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
              example:
                id: 03ba836a-813e-11ed-a1eb-0242ac120002
                name: Rows
                slug: rows
                created_at: '2020-01-01T17:14:16Z'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/WorkspaceNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/workspaces' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/workspaces");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /folders:
    parameters:
      - name: offset
        in: query
        description: Skip a specific number of items before returning the items set
        schema:
          type: integer
          default: 0
        required: false
      - name: limit
        in: query
        description: Maximum number of cells returned
        schema:
          type: integer
          default: 100
          maximum: 1000
          minimum: 0
        required: false
    get:
      tags:
        - Workspace
      summary: List folders
      description: |
        List folders of a workspace. You might use this in order to get the Folder ID that you might want to use as a parameter in other operations, e.g. to get only the spreadsheets of a particular folder.
      operationId: getWorkspaceFolders
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderList'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/WorkspaceNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/folders?offset=0&limit=100' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/folders?offset=0&limit=100");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /spreadsheets:
    parameters:
      - name: folder_id
        in: query
        description: Folder unique identifier
        schema:
          type: string
          format: UUID
        required: false
        example: ba30972c-8140-11ed-a1eb-0242ac120002
      - name: offset
        in: query
        description: Skip a specific number of items before returning the items set
        schema:
          type: integer
          default: 0
        required: false
      - name: limit
        in: query
        description: Maximum number of cells returned
        schema:
          type: integer
          default: 100
          maximum: 1000
          minimum: 0
        required: false
    get:
      tags:
        - Workspace
      summary: List spreadsheets
      description: |
        List spreadsheets of a workspace ordered by the descending last modified date. You have the option to only get the Spreadsheets of a Folder by using the Folder ID. To know the Folder ID, you may use the Get Folders endpoint described above.
      operationId: getWorkspaceSpreadsheets
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpreadsheetsList'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/WorkspaceOrFolderNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/spreadsheets?folder_id={folder_id}&offset=0&limit=100' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets?folder_id={folder_id}&offset=0&limit=100");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /spreadsheets/{spreadsheet_id}:
    parameters:
      - name: spreadsheet_id
        in: path
        description: Spreadsheet unique identifier
        schema:
          type: string
        required: true
        example: 5HGcWJFcQVVAv4mNTYb2RS
    get:
      tags:
        - Spreadsheet
      summary: Get spreadsheet information
      description: |
        List details of a spreadsheet by Spreadsheet ID.

        You might use this in order to get the Table ID that you might want to use as a parameter in other operations, e.g. to get the cells of a particular table and range.
      operationId: getSpreadsheetBySpreadsheetId
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpreadsheetDetail'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/WorkspaceOrFolderNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}:
    parameters:
      - name: spreadsheet_id
        in: path
        description: Spreadsheet unique identifier
        schema:
          type: string
        required: true
        example: 5HGcWJFcQVVAv4mNTYb2RS
      - name: table_id
        in: path
        description: Table unique identifier
        schema:
          type: string
          format: UUID
        required: true
        example: 1cfc2010-1142-13eg-a1eb-0242ac120002
      - name: range
        in: path
        description: A1 notation of the range to retrieve values from
        schema:
          type: string
        required: true
        example: A1:D4
    get:
      tags:
        - Spreadsheet
      summary: Get values from range
      description: |
        List the values of a range of cells for the specified Spreadsheet ID, Table ID and range.

        Empty trailing rows and columns will not be included.
      operationId: getRangeValuesBySpreadsheetId
      parameters:
        - name: value_render_option
          in: query
          description: Choose between receiving the formatted or raw display values.
          schema:
            type: string
            enum:
              - FORMATTED
              - RAW
            default: FORMATTED
          required: false
        - name: major_dimension
          in: query
          description: Choose between receiving display values grouped by row or column.
          schema:
            type: string
            enum:
              - ROW
              - COLUMN
            default: ROW
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    description: |
                      Data inside a table range as a list of cell values grouped by row.
                    type: array
                    items:
                      type: array
                      items:
                        type: string
                        description: Cell values
        '400':
          $ref: '#/components/responses/GetCellsInAreaBadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/SpreadsheetOrTableNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '413':
          $ref: '#/components/responses/ResponseTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          description: Internal server error
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /spreadsheets/{spreadsheet_id}/tables/{table_id}/cells/{range}:
    parameters:
      - name: spreadsheet_id
        in: path
        description: Spreadsheet unique identifier
        schema:
          type: string
        required: true
        example: 5HGcWJFcQVVAv4mNTYb2RS
      - name: table_id
        in: path
        description: Table unique identifier
        schema:
          type: string
          format: UUID
        required: true
        example: 1cfc2010-1142-13eg-a1eb-0242ac120002
      - name: range
        in: path
        description: A1 notation of the range to retrieve values from
        schema:
          type: string
        required: true
        example: A1:D4
    get:
      tags:
        - Spreadsheet
      summary: Get cells from range
      parameters:
        - name: value_render_option
          in: query
          description: Choose between receiving the formatted or raw display values.
          schema:
            type: string
            enum:
              - FORMATTED
              - RAW
            default: FORMATTED
          required: false
        - name: major_dimension
          in: query
          description: Choose between receiving cells grouped by row or column.
          schema:
            type: string
            enum:
              - ROW
              - COLUMN
            default: ROW
          required: false
      description: |
        List the values and formulas (if any) of a range of cells for the specified Spreadsheet ID, Table ID and range.

        Empty trailing rows and columns will not be included.
      operationId: getRangeCellsBySpreadsheetId
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RangeList'
        '400':
          $ref: '#/components/responses/GetCellsInAreaBadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/SpreadsheetOrTableNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '413':
          $ref: '#/components/responses/ResponseTooLarge'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          description: Internal server error
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/cells/{range}?offset=0&limit=100' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/cells/{range}?offset=0&limit=100");
            client.Timeout = -1;
            var request = new RestRequest(Method.GET);
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
    post:
      tags:
        - Spreadsheet
      summary: Overwrite cells in range
      description: |
        Overwrite the values and formulas (if any) for the specified Spreadsheet ID, Table ID and range. You provide the list of values and formulas in the body of the request. 

        If you pass both a value and a formula for a specific cell, the formula will take precedence over the value. If a cell contains values and formulas, they will be overwritten.

        The values and formulas are written to the specified range from the top left to the bottom right cell, moving row by row.

        Example: if you send ```range=A1:B2```, then the API will write the cells in this order: ```A1```, ```B1```, ```A2```, ```B2```.
      operationId: writeRangeValuesBySpreadsheetId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverwriteCells'
        description: Range of cell formulas and values to write on, to fill left to right, and then move to the next row, from top to bottom
        required: true
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/UpsertCellsInAreaBadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/SpreadsheetOrTableNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request POST 'https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/cells/{range}' \
            --header 'Content-Type: application/json' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}' \
            --data-raw '{
              "cells": [
                [
                  {
                    "col": "<string>",
                    "row": "<string>",
                    "value": "<string>",
                    "formula": "<string>"
                  },
                  {
                    "col": "<string>",
                    "row": "<string>",
                    "value": "<string>",
                    "formula": "<string>"
                  }
                ],
                [
                  {
                    "col": "<string>",
                    "row": "<string>",
                    "value": "<string>",
                    "formula": "<string>"
                  },
                  {
                    "col": "<string>",
                    "row": "<string>",
                    "value": "<string>",
                    "formula": "<string>"
                  }
                ]
              ]
            }'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/cells/{range}");
            client.Timeout = -1;
            var request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            var body = @"{" + "\n" +
            @"  ""cells"": [" + "\n" +
            @"    [" + "\n" +
            @"      {" + "\n" +
            @"        ""col"": ""<string>""," + "\n" +
            @"        ""row"": ""<string>""," + "\n" +
            @"        ""value"": ""<string>""," + "\n" +
            @"        ""formula"": ""<string>""" + "\n" +
            @"      }," + "\n" +
            @"      {" + "\n" +
            @"        ""col"": ""<string>""," + "\n" +
            @"        ""row"": ""<string>""," + "\n" +
            @"        ""value"": ""<string>""," + "\n" +
            @"        ""formula"": ""<string>""" + "\n" +
            @"      }" + "\n" +
            @"    ]," + "\n" +
            @"    [" + "\n" +
            @"      {" + "\n" +
            @"        ""col"": ""<string>""," + "\n" +
            @"        ""row"": ""<string>""," + "\n" +
            @"        ""value"": ""<string>""," + "\n" +
            @"        ""formula"": ""<string>""" + "\n" +
            @"      }," + "\n" +
            @"      {" + "\n" +
            @"        ""col"": ""<string>""," + "\n" +
            @"        ""row"": ""<string>""," + "\n" +
            @"        ""value"": ""<string>""," + "\n" +
            @"        ""formula"": ""<string>""" + "\n" +
            @"      }" + "\n" +
            @"    ]" + "\n" +
            @"  ]" + "\n" +
            @"}";
            request.AddParameter("application/json", body,  ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
  /spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}:append:
    parameters:
      - name: spreadsheet_id
        in: path
        description: Spreadsheet unique identifier
        schema:
          type: string
        required: true
        example: 5HGcWJFcQVVAv4mNTYb2RS
      - name: table_id
        in: path
        description: Table unique identifier
        schema:
          type: string
          format: UUID
        required: true
        example: 1cfc2010-1142-13eg-a1eb-0242ac120002
      - name: range
        in: path
        description: A1 notation of the range to retrieve values from
        schema:
          type: string
        required: true
        example: A1:D4
    post:
      tags:
        - Spreadsheet
      summary: Append values to range
      description: |
        Append the values for the specified Spreadsheet ID, Table ID and range. You provide the list of values in the body of the request. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.

        The input range is used to search for existing data. Values will be appended to the next empty row.

        The values are written to the specified range from the left to the right cell, moving row by row. 

        Example: if you request ```range=A:B``` and the cells are filled until range ```A10:B10```, then the API will append to the next empty row: ```A11```, ```B11```.
      operationId: appendRangeCellsBySpreadsheetId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppendValues'
        description: Range of cell values to write on, to fill left to right, and then move to the next row, from top to bottom.
        required: true
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/AppendValuesInAreaBadRequestError'
        '401':
          $ref: '#/components/responses/MissingAPIKeyError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/SpreadsheetOrTableNotFoundError'
        '408':
          $ref: '#/components/responses/RequestTimeoutError'
        '429':
          $ref: '#/components/responses/TooManyRequestsError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request POST 'https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}:append' \
            --header 'Content-Type: application/json' \
            --header 'Accept: application/json' \
            --header 'Authorization: Bearer {YOUR API TOKEN}' \
            --data-raw '{
              "values": [
                [
                  "<string>",
                  "<string>"
                ],
                [
                  "<string>",
                  "<string>"
                ]
              ]
            }'
        - lang: C#
          source: |
            var client = new RestClient("https://api.rows.com/v1beta1/spreadsheets/{spreadsheet_id}/tables/{table_id}/values/{range}:append");
            client.Timeout = -1;
            var request = new RestRequest(Method.POST);
            request.AddHeader("Content-Type", "application/json");
            request.AddHeader("Accept", "application/json");
            request.AddHeader("Authorization", "Bearer {YOUR API TOKEN}");
            var body = @"{" + "\n" +
            @"  ""values"": [" + "\n" +
            @"    [" + "\n" +
            @"      ""<string>""," + "\n" +
            @"      ""<string>""" + "\n" +
            @"    ]," + "\n" +
            @"    [" + "\n" +
            @"      ""<string>""," + "\n" +
            @"      ""<string>""" + "\n" +
            @"    ]" + "\n" +
            @"  ]" + "\n" +
            @"}";
            request.AddParameter("application/json", body,  ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
            Console.WriteLine(response.Content);
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: opaque
      description: |
        The Rows API uses token-based authentication. All your requests should have the HTTP authorization bearer token header filled with an API key.

        To manage the API keys for your account and workspace, access your workspace settings. Please read details on how to manage API keys here.

        ```Authorization: Bearer {your API Key}```
  schemas:
    Workspace:
      type: object
      title: Workspace
      properties:
        id:
          description: The workspace unique identifier
          type: string
          format: UUID
        name:
          description: The workspace name
          type: string
        slug:
          description: The workspace slug
          type: string
          example: the-workspace-slug
        created_at:
          description: The workspace created date and time
          type: string
          format: date-time
          example: '2020-01-01T17:10:16Z'
    Error:
      type: object
      minProperties: 1
      description: The Error details JSON Object.
      properties:
        code:
          type: integer
          description: The error status code.
          minimum: 400
          maximum: 599
        message:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
    Folder:
      type: object
      title: Folder
      properties:
        id:
          description: The folder unique identifier
          type: string
          format: UUID
        name:
          description: The folder name
          type: string
        slug:
          description: The folder slug
          type: string
    FolderList:
      description: Array of folders
      type: object
      properties:
        items:
          type: array
          description: List of Folders
          items:
            $ref: '#/components/schemas/Folder'
        next_page_results:
          type:
            - string
            - 'null'
          format: uri
          description: The relative API URL to get the next page of results.
      example:
        - items:
            - id: 7cbc1000-8141-11ed-a1eb-0242ac120002
              name: Board meetings reports
              slug: board-meetings-reports
            - id: 82c3fa30-8141-11ed-a1eb-0242ac120002
              name: My finance reports
              slug: my-finance-reports
          next_page_results: v1beta1/folders?offset=100&limit=100
    Spreadsheet:
      type: object
      title: Spreadsheet
      properties:
        id:
          description: The spreadsheet identifier
          type: string
          example: 5HGcWJFcQVVAv4mNTYb2RS
        name:
          description: The spreadsheet name
          type: string
        slug:
          description: The spreadsheet slug
          type: string
        folder_id:
          description: The folder unique identifier
          type: string
          format: UUID
        created_at:
          description: The page created date and time
          type: string
          format: date-time
          example: '2020-01-01T17:10:16Z'
    SpreadsheetsList:
      description: Array of spreadsheets
      type: object
      properties:
        items:
          type: array
          description: List of Spreadsheets
          items:
            $ref: '#/components/schemas/Spreadsheet'
        next_page_results:
          type:
            - string
            - 'null'
          format: uri
          description: The relative API URL to get the next page of results.
      example:
        - items:
            - id: 5HGcWJFcQVVAv4mNTYb2RS
              name: My Facebook monthly insights
              slug: my-facebook-monthly-insights
              folder_id: d4e36554-9257-11ed-a1eb-0242ac120002
              created_at: '2020-01-01T17:10:16Z'
            - id: 6WL8sDlPmMbQsjvaNpZDx8
              name: My Twitter monthly insights
              slug: my-twitter-monthly-insights
              folder_id: dd5fd104-9257-11ed-a1eb-0242ac120002
              created_at: '2020-01-01T17:00:16Z'
          next_page_results: v1beta1/spreadsheets?offset=100&limit=100
    Table:
      type: object
      title: Table
      properties:
        id:
          description: The table unique identifier
          type: string
          format: UUID
          example: 7cbc1000-8141-11ed-a1eb-0242ac120002
        name:
          description: The table name.
          example: My Facebook monthly insights
          type: string
        slug:
          description: The table name slug
          type: string
          example: my-facebook-monthly-insights
        created_at:
          description: The table created date and time
          type: string
          format: date-time
          example: '2020-01-01T17:10:16Z'
    Page:
      type: object
      title: Page
      properties:
        id:
          description: The page unique identifier
          type: string
          format: uuid
          example: 7cbc1000-8141-11ed-a1tb-1242vc120102
        name:
          description: The page name
          type: string
          example: Page 1
        slug:
          description: The page slug
          type: string
          example: page-1
        created_at:
          description: The page created date and time
          type: string
          format: date-time
          example: '2020-01-01T17:10:16Z'
        tables:
          description: List of Tables
          type: array
          items:
            $ref: '#/components/schemas/Table'
    SpreadsheetDetail:
      type: object
      title: Spreadsheet
      properties:
        id:
          description: The spreadsheet identifier
          type: string
          example: 5HGcWJFcQVVAv4mNTYb2RS
        name:
          description: The spreadsheet name
          type: string
          example: Monthly reports
        slug:
          description: The spreadsheet slug
          type: string
          example: monthly-reports
        created_at:
          description: The spreadsheet created date and time
          type: string
          format: date-time
          example: '2020-01-01T17:10:16Z'
        pages:
          type: array
          description: List of Pages
          items:
            $ref: '#/components/schemas/Page'
    Cell:
      description: Cell values and formulas
      type: object
      properties:
        col:
          description: The zero-based column index
          type: string
          example: 1
        row:
          description: The zero-based row index
          type: string
          example: 0
        value:
          description: The display value of a cell
          type: string
          example: 129
        formula:
          description: The formula of a cell
          type: string
          example: '=SUM(B:B)'
    CellsList:
      description: Data inside a table range as a list of cells grouped by row.
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/Cell'
    RangeList:
      description: Data inside a table range as a list of cells grouped by row.
      type: object
      properties:
        items:
          $ref: '#/components/schemas/CellsList'
    OverwriteCell:
      description: Cell values and formulas
      type: object
      properties:
        value:
          description: The display value of a cell
          type: string
          example: 129
        formula:
          description: The formula of a cell
          type: string
          example: '=SUM(B:B)'
    OverwriteCellsList:
      description: Data inside a table range as a list of cells grouped by row.
      type: array
      items:
        type: array
        items:
          $ref: '#/components/schemas/OverwriteCell'
    OverwriteCells:
      description: |
        Data inside a table range to be written. This is a list of cells grouped by row.

        To set a cell to an empty value, set the value to an empty string.
      type: object
      properties:
        cells:
          $ref: '#/components/schemas/OverwriteCellsList'
      required:
        - cells
    AppendValues:
      type: object
      properties:
        values:
          description: |
            Data inside a table range as a list of cell values grouped by row.
          type: array
          items:
            type: array
            items:
              type: string
              description: Cell values to be written
      required:
        - values
  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MissingAPIKeyError:
      description: Missing API Key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    WorkspaceNotFoundError:
      description: Workspace not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RequestTimeoutError:
      description: Request timeout
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TooManyRequestsError:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      headers:
        Retry-After:
          schema:
            type: integer
          description: This value indicates how many seconds the user should wait before making a follow-up request.
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    WorkspaceOrFolderNotFoundError:
      description: Workspace | Folder not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    GetCellsInAreaBadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter spreadsheet_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter table_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range exceeds our 404x100000 limits.
    SpreadsheetOrTableNotFoundError:
      description: Spreadsheet | Table not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ResponseTooLarge:
      description: Response too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UpsertCellsInAreaBadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter spreadsheet_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter table_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range exceeds our 404x100000 limits.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of cells is empty.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of cells exceeds the range column.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of cells exceeds the limit of 100.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of cells exceeds the range.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided formula is invalid.
    AppendValuesInAreaBadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter spreadsheet_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The parameter table_id is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range is invalid.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided range exceeds our 404x100000 limits.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of values is empty.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of values exceeds the range column.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of values exceeds the limit of 100.
              - type: object
                minProperties: 1
                description: The Error details JSON Object.
                properties:
                  code:
                    type: integer
                    description: The error status code.
                    default: 400
                  message:
                    type: string
                    description: The provided list of values exceeds the range.
security:
  - Bearer: []
